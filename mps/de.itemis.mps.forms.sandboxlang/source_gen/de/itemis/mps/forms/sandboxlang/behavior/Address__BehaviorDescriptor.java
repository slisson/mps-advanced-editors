package de.itemis.mps.forms.sandboxlang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.IterableUtils;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Address__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x6b9006747fdafadfL, "de.itemis.mps.forms.sandboxlang.structure.Address");

  public static final SMethod<String> getTitle_id5fk$COuC_q$ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getTitle").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).id("5fk$COuC_q$").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getTitle_id5fk$COuC_q$);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String getTitle_id5fk$COuC_q$(@NotNull SNode __thisNode__) {
    String title = IterableUtils.join(ListSequence.fromList(ListSequence.fromListAndArray(new ArrayList<String>(), SPropertyOperations.getString(__thisNode__, PROPS.name$pBcl), SPropertyOperations.getString(__thisNode__, PROPS.postalCode$pIeN), SPropertyOperations.getString(__thisNode__, PROPS.city$pJpS))).where(new NotNullWhereFilter<String>()), ", ");
    if ((title == null || title.length() == 0)) {
      title = "" + (SNodeOperations.getIndexInParent(__thisNode__) + 1);
    }
    return title;
  }

  /*package*/ Address__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) getTitle_id5fk$COuC_q$(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$pBcl = MetaAdapterFactory.getProperty(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x6b9006747fdafadfL, 0x53d4928d1ea24755L, "name");
    /*package*/ static final SProperty postalCode$pIeN = MetaAdapterFactory.getProperty(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x6b9006747fdafadfL, 0x53d4928d1ea2475eL, "postalCode");
    /*package*/ static final SProperty city$pJpS = MetaAdapterFactory.getProperty(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x6b9006747fdafadfL, 0x53d4928d1ea24763L, "city");
  }
}
