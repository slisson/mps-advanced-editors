package de.itemis.mps.forms.sandboxlang.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.AbstractCellProvider;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import de.itemis.mps.forms.sandboxlang.behavior.Address__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

/*package*/ class Addresses_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Addresses_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_qkscxh_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createCollection_1());
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_qkscxh_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(createCustom_0());
    return editorCell;
  }
  private EditorCell createCustom_0() {
    AbstractCellProvider provider = new _FunctionTypes._return_P0_E0<AbstractCellProvider>() {
      public AbstractCellProvider invoke() {
        return new AbstractCellProvider(myNode) {
          @Override
          public EditorCell createEditorCell(EditorContext ec) {
            EditorCell_Collection collection = EditorCell_Collection.createVertical(ec, myNode);
            EditorCell_Collection tabs = EditorCell_Collection.createHorizontal(ec, myNode);
            collection.addEditorCell(tabs);

            for (SNode address : ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.addresses$wgM))) {
              tabs.addEditorCell(new CellCreateOperation_a0a0a4a0a0a0a0a0a(ec, address).create());
            }

            EditorCell_Constant addButton = new EditorCell_Constant(ec, myNode, "+");
            addButton.setAction(CellActionType.CLICK, new AbstractCellAction() {
              @Override
              public void execute(EditorContext p1) {
                SNodeFactoryOperations.addNewChild(myNode, LINKS.addresses$wgM, null);
              }
            });
            addButton.getStyle().set(StyleAttributes.DRAW_BORDER, true);
            tabs.addEditorCell(addButton);

            SNode activeTab = ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.addresses$wgM)).getElement(SPropertyOperations.getInteger(myNode, PROPS.activeTab$kbKK));
            if ((activeTab != null)) {
              collection.addEditorCell(ec.getEditorComponent().getUpdater().getCurrentUpdateSession().updateChildNodeCell(activeTab));
            } else {
              collection.addEditorCell(EditorCell_Collection.createHorizontal(ec, myNode));
            }

            return collection;
          }
        };
      }
    }.invoke();
    EditorCell editorCell = provider.createEditorCell(getEditorContext());
    editorCell.setCellId("Custom_qkscxh_a0a");
    return editorCell;
  }
  public static class CellCreateOperation_a0a0a4a0a0a0a0a0a extends AbstractEditorBuilder {
    private SNode myNode;

    public CellCreateOperation_a0a0a4a0a0a0a0a0a(EditorContext editorContext, SNode node) {
      super(editorContext);
      myNode = node;
    }

    @NotNull
    @Override
    public SNode getNode() {
      return myNode;
    }

    public EditorCell create() {
      return createReadOnlyModelAccessor_0();
    }
    private EditorCell createReadOnlyModelAccessor_0() {
      EditorCell_Property editorCell = EditorCell_Property.create(getEditorContext(), new ModelAccessor.ReadOnly() {
        public String getText() {
          return (String) Address__BehaviorDescriptor.getTitle_id5fk$COuC_q$.invoke(SNodeOperations.cast(myNode, CONCEPTS.Address$3m));
        }
      }, myNode);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_qkscxh_a0a0a0a0e0a0a0a0a0a0");
      Style style = new StyleImpl();
      style.set(StyleAttributes.DRAW_BORDER, true);
      style.set(StyleAttributes.EDITABLE, false);
      editorCell.getStyle().putAll(style);
      am_AddressTabHeader.setCellActions(editorCell, myNode, getEditorContext());
      return editorCell;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink addresses$wgM = MetaAdapterFactory.getContainmentLink(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x53d4928d1e988727L, 0x53d4928d1e989583L, "addresses");
  }

  private static final class PROPS {
    /*package*/ static final SProperty activeTab$kbKK = MetaAdapterFactory.getProperty(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x53d4928d1e988727L, 0x53d4928d1ea59e49L, "activeTab");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Address$3m = MetaAdapterFactory.getConcept(0x11d2696e04842L, 0x8ea14b4df566b650L, 0x6b9006747fdafadfL, "de.itemis.mps.forms.sandboxlang.structure.Address");
  }
}
